# id generator
id generator is distribute id generator base on redis.
now support 3 kinds of id

1. auto incrment integer (8 bytes)
2. twitter snowflake id (8 bytes)
3. mongodb object id (12 bytes | 24 bytes hex string)

#why
it's because that redis provide the command dispatch with high performance and provice some feature like aof and config reload. So it's easy to implement custom command only serval hours:)

# install
make PREFIX=/path/to/file install

#use
1. close redis rdb
2. enable redis aof for always (not every second)
3. change redis config file in /opt/id-generator/conf

    ```
    common.conf #reids common conf
    #数据中心id
datacenter_id 2
#后台
daemonize no
#端口
#port 6379
#工作目录
dir /data/id-generator
#数据库数量
databases 1
#tcp listen队列长度
tcp-backlog 1024
#监听地址
bind 0.0.0.0
#客户端闲置最长时间
timeout 0
#tcp keepalive
tcp-keepalive 60
#log等级
loglevel notice
#log路径
logfile ""
###################
#we dont use rdb, we use aof always
##################
#dbfilename id0.rdb
#900s内存变化一次保存
#300s内变化10次保存
#60s内存变化10000次保存
#save 900 1
#save 300 10
#save 60 10000
#rdb文件压缩
#rdbcompression yes
#rdb文件校验
#rdbchecksum yes
#同一时刻最大客户端数
maxclients 10000
#最大内存
#maxmemory 4gb
#aof
appendonly yes
#aof文件名
#appendfilename "appendonly.aof"
#aof策略
appendfsync always
#appendfsync everysec
# appendfsync no
#保证数据完整性的最安全的选择。
no-appendfsync-on-rewrite no
#aof重写最小大小
#redis会记录上次重写时的aof大小。假如redis自启动至今还没有进行过重写，那么启动时aof文件的大小会被作为基准值。这个基准值会和当前的aof大小进行比较。如果当前aof大小超出所设置的增长比例，则会触发重写。另外，你还需要设置一个最小大小，是为了防止在aof很小时就触发重写。
auto-aof-rewrite-min-size 64mb
auto-aof-rewrite-percentage 100
#增量"文件同步"策略,默认为"yes",而且必须为yes
aof-rewrite-incremental-fsync yes
    step.conf #step command conf
    #step.conf
    step_offset 2
    step_begin_test 0
    step_begin_goods 0

    #for generate multi process conf
    /opt/id-generator/utils/id-generator/generate_conf.sh --config-dir /opt/id-generator/conf --port 6000 --num 2


    it generate two config file id0.conf id1.conf
    #id0.conf
    port 6000
    appendfilename id0.aof
    include /opt/id-generator/conf/common.conf

    step_offset 2
    step_begin_test 10000
    #id1.conf
    port 6001
    appendfilename id1.aof
    include /opt/id-generator/conf/common.conf

    step_offset 2
    step_begin_test 10001
    ```
4. strart up redis, we use supervisord: supervisorctl start id-generate:*

    ```
    [program:id-generator]
directory=/opt/id-generator
command=taskset -c %(process_num)01d /opt/id-generator/bin/redis-server /opt/id-generator/conf/id%(process_num)01d.conf
numprocs=1
numprocs_start=1
process_name = %(program_name)s-%(process_num)01d
redirect_stderr=true
log_stdout=true             ; if true, log program stdout (default true)
log_stderr=true             ; if true, log program stderr (def false)
stdout_logfile=/data/logs/supervisord/%(program_name)s-%(process_num)01d.log    ; child log path, use NONE for none; default AUTO
stdout_logfile_maxbytes=50MB        ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=3         ; # of logfile backups (default 10)
    ```


#high avaliable
1. lvs + keepalived

2. config discover server


#performance
```
CPU: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
Memory: 62G
Disk: 1000转
Network: 1Gb

# ./redis-benchmark -h bc-r7app8 -p 6000 -n 10000000 -c 100 -t snowflake
====== SNOWFLAKE ======
  10000000 requests completed in 70.89 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

99.98% <= 1 milliseconds
100.00% <= 2 milliseconds
100.00% <= 4 milliseconds
100.00% <= 4 milliseconds
141069.59 requests per second

# ./redis-benchmark -h bc-r7app8 -p 6000 -n 10000000 -c 100 -t objectid
====== OBJECTID ======
  10000000 requests completed in 75.76 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

99.98% <= 1 milliseconds
100.00% <= 1 milliseconds
131995.77 requests per second

# ./redis-benchmark -h bc-r7app8 -p 6000 -n 10000000 -c 100 -t step test
====== test ======
  10000000 requests completed in 72.76 seconds
  100 parallel clients
  3 bytes payload
  keep alive: 1

99.98% <= 1 milliseconds
100.00% <= 2 milliseconds
100.00% <= 3 milliseconds
100.00% <= 3 milliseconds
137443.81 requests per second
```

#generator conf
/opt/id-generator/utils/generate_conf.sh --num 5 --config-dir /Users/detailyang/Git/id-generator/conf --port 3000
